using EducationCourseManagement.DTOs;
using Microsoft.AspNetCore.Mvc.Testing;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.Json;
using System.Threading.Tasks;
using Xunit;

namespace EduCourseManagementTest
{
    public class SchedulesTest : AuthenticatedTestBase
    {
        public SchedulesTest(WebApplicationFactory<Program> factory) : base(factory) { }

        private StringContent GetJsonContent(object obj)
        {
            return new StringContent(JsonSerializer.Serialize(obj), Encoding.UTF8, "application/json");
        }

        private class PostScheduleResponse
        {
            public ScheduleDTO CreatedSchedule { get; set; }
        }

        [Fact]
        public async Task GetScheduleById()
        {
            var client = await GetAuthorizedClientAsync();
            var response = await client.GetAsync("/api/Schedules/1");

            Assert.Equal(System.Net.HttpStatusCode.OK, response.StatusCode);
            var content = await response.Content.ReadAsStringAsync();
            Assert.False(string.IsNullOrEmpty(content), "Response content should not be null or empty");
        }

        [Fact]
        public async Task GetAllSchedules()
        {
            var client = await GetAuthorizedClientAsync();
            var response = await client.GetAsync("/api/Schedules");

            Assert.Equal(System.Net.HttpStatusCode.OK, response.StatusCode);
            var content = await response.Content.ReadAsStringAsync();
            Assert.False(string.IsNullOrEmpty(content), "Response content should not be null or empty");
        }

        [Fact]
        public async Task PostSchedule()
        {
            var client = await GetAuthorizedClientAsync();
            var newSchedule = new
            {
                courseId = 1,
                instructorId = 1,
                roomId = 1,
                date = "2024-11-30T09:00:00",
                timeSlot = "1:00 PM - 02:30 PM",
                isAutoGenerated = false,
                generatedBy = "Admin"
            };

            var response = await client.PostAsync("/api/Schedules", GetJsonContent(newSchedule));
            Assert.Equal(System.Net.HttpStatusCode.Created, response.StatusCode);

            // Extract ScheduleId from the response
            var content = await response.Content.ReadAsStringAsync();
            var scheduleResponse = JsonSerializer.Deserialize<PostScheduleResponse>(content, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
            var generatedScheduleId = scheduleResponse?.CreatedSchedule?.ScheduleId ?? 0;
            Assert.True(generatedScheduleId > 0, "Generated scheduleId should be greater than 0");

            // Cleanup
            var deleteResponse = await client.DeleteAsync($"/api/Schedules/{generatedScheduleId}");
            Assert.Equal(System.Net.HttpStatusCode.NoContent, deleteResponse.StatusCode);
        }

        [Fact]
        public async Task PutSchedule()
        {
            var client = await GetAuthorizedClientAsync();

            var newSchedule = new
            {
                courseId = 1,
                instructorId = 1,
                roomId = 1,
                date = "2024-11-30T09:00:00",
                timeSlot = "1:00 PM - 02:30 PM",
                isAutoGenerated = false,
                generatedBy = "Admin"
            };

            var postResponse = await client.PostAsync("/api/Schedules", GetJsonContent(newSchedule));
            Assert.Equal(System.Net.HttpStatusCode.Created, postResponse.StatusCode);

            var postContent = await postResponse.Content.ReadAsStringAsync();
            var scheduleResponse = JsonSerializer.Deserialize<PostScheduleResponse>(postContent, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
            var generatedScheduleId = scheduleResponse?.CreatedSchedule?.ScheduleId ?? 0;

            Assert.True(generatedScheduleId > 0, "Generated scheduleId should be greater than 0");

            var updatedSchedule = new
            {
                scheduleId = generatedScheduleId,
                courseId = 1,
                instructorId = 1,
                roomId = 1,
                date = "2024-11-30T09:00:00",
                timeSlot = "2:30 PM - 04:00 PM",
                isAutoGenerated = false,
                generatedBy = "Admin"
            };

            var putResponse = await client.PutAsync($"/api/Schedules/{generatedScheduleId}", GetJsonContent(updatedSchedule));
            Assert.Equal(System.Net.HttpStatusCode.NoContent, putResponse.StatusCode);

            // Cleanup
            var deleteResponse = await client.DeleteAsync($"/api/Schedules/{generatedScheduleId}");
            Assert.Equal(System.Net.HttpStatusCode.NoContent, deleteResponse.StatusCode);
        }

        [Fact]
        public async Task DeleteSchedule()
        {
            var client = await GetAuthorizedClientAsync();

            var newSchedule = new
            {
                courseId = 1,
                instructorId = 1,
                roomId = 1,
                date = "2024-11-30T09:00:00",
                timeSlot = "1:00 PM - 02:30 PM",
                isAutoGenerated = false,
                generatedBy = "Admin"
            };

            var postResponse = await client.PostAsync("/api/Schedules", GetJsonContent(newSchedule));
            Assert.Equal(System.Net.HttpStatusCode.Created, postResponse.StatusCode);

            var postContent = await postResponse.Content.ReadAsStringAsync();
            var scheduleResponse = JsonSerializer.Deserialize<PostScheduleResponse>(postContent, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
            var generatedScheduleId = scheduleResponse?.CreatedSchedule?.ScheduleId ?? 0;

            Assert.True(generatedScheduleId > 0, "Generated scheduleId should be greater than 0");

            // Cleanup
            var deleteResponse = await client.DeleteAsync($"/api/Schedules/{generatedScheduleId}");
            Assert.Equal(System.Net.HttpStatusCode.NoContent, deleteResponse.StatusCode);
        }
    }
}

